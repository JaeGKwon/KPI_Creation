{
  "summary": {
    "total_invalid_sqls": 70,
    "generated_at": "2025-08-25 18:43:40",
    "description": "SQLs that failed validation and were not registered"
  },
  "invalid_sqls": [
    {
      "kpi_name": "Daily Active Users",
      "table_name": "tb_user",
      "sql_query": "SELECT log_date, COUNT(DISTINCT user_id) FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY log_date",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 126"
      }
    },
    {
      "kpi_name": "Monthly Active Users",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "Yearly Active Users",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('year', log_date) AS year, COUNT(DISTINCT user_id) FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY year",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 145"
      }
    },
    {
      "kpi_name": "User Growth Rate",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) - LAG(COUNT(DISTINCT user_id), 1) OVER (ORDER BY month) AS growth_rate FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "User Churn Rate",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) - LEAD(COUNT(DISTINCT user_id), 1) OVER (ORDER BY month) AS churn_rate FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "User Retention Rate",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) / LAG(COUNT(DISTINCT user_id), 1) OVER (ORDER BY month) AS retention_rate FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "User Engagement Rate",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) / total_users AS engagement_rate FROM tb_user CROSS JOIN (SELECT COUNT(DISTINCT user_id) AS total_users FROM tb_user WHERE user_id IS NOT NULL) AS total_users_count WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "Average User Activity per Day",
      "table_name": "tb_user",
      "sql_query": "SELECT log_date, COUNT(*) / COUNT(DISTINCT user_id) AS avg_activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY log_date",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 126"
      }
    },
    {
      "kpi_name": "Average User Activity per Month",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(*) / COUNT(DISTINCT user_id) AS avg_activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "Average User Activity per Year",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('year', log_date) AS year, COUNT(*) / COUNT(DISTINCT user_id) AS avg_activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY year",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 145"
      }
    },
    {
      "kpi_name": "Peak User Activity Day",
      "table_name": "tb_user",
      "sql_query": "SELECT log_date, COUNT(*) AS activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY log_date ORDER BY activity DESC LIMIT 1",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 126"
      }
    },
    {
      "kpi_name": "Peak User Activity Month",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(*) AS activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month ORDER BY activity DESC LIMIT 1",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "Peak User Activity Year",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('year', log_date) AS year, COUNT(*) AS activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY year ORDER BY activity DESC LIMIT 1",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 145"
      }
    },
    {
      "kpi_name": "User Activity Trend",
      "table_name": "tb_user",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(*) AS activity FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month ORDER BY month",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "Order Completion Rate",
      "table_name": "tb_market_order_log",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'completed' THEN 1 END) / COUNT(*) FROM tb_market_order_log WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: invalid input syntax for type integer: \"completed\"\n  Position: 151",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: invalid input syntax for type integer: \"completed\"\n  Position: 151",
        "error": "ERROR: invalid input syntax for type integer: \"completed\"\n  Position: 151"
      }
    },
    {
      "kpi_name": "Order Cancellation Rate",
      "table_name": "tb_market_order_log",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'cancelled' THEN 1 END) / COUNT(*) FROM tb_market_order_log WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: invalid input syntax for type integer: \"cancelled\"\n  Position: 151",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: invalid input syntax for type integer: \"cancelled\"\n  Position: 151",
        "error": "ERROR: invalid input syntax for type integer: \"cancelled\"\n  Position: 151"
      }
    },
    {
      "kpi_name": "Average Time to Complete Order",
      "table_name": "tb_market_order_log",
      "sql_query": "SELECT AVG(DATEDIFF('second', create_date, completed_date)) FROM tb_market_order_log WHERE status = 'completed' AND create_date IS NOT NULL AND completed_date IS NOT NULL AND completed_date > create_date",
      "error": "SQL execution failed: ERROR: column \"completed_date\" does not exist\n  Position: 162",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"completed_date\" does not exist\n  Position: 162",
        "error": "ERROR: column \"completed_date\" does not exist\n  Position: 162"
      }
    },
    {
      "kpi_name": "Average Time to Cancel Order",
      "table_name": "tb_market_order_log",
      "sql_query": "SELECT AVG(DATEDIFF('second', create_date, cancelled_date)) FROM tb_market_order_log WHERE status = 'cancelled' AND create_date IS NOT NULL AND cancelled_date IS NOT NULL AND cancelled_date > create_date",
      "error": "SQL execution failed: ERROR: column \"cancelled_date\" does not exist\n  Position: 162",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"cancelled_date\" does not exist\n  Position: 162",
        "error": "ERROR: column \"cancelled_date\" does not exist\n  Position: 162"
      }
    },
    {
      "kpi_name": "Total Order Value",
      "table_name": "tb_market_order_log",
      "sql_query": "SELECT SUM(order_value) FROM tb_market_order_log JOIN tb_order ON tb_market_order_log.order_id = tb_order.order_id WHERE tb_market_order_log.order_id IS NOT NULL AND tb_order.order_value IS NOT NULL",
      "error": "SQL execution failed: ERROR: relation \"tb_order\" does not exist\n  Position: 173",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: relation \"tb_order\" does not exist\n  Position: 173",
        "error": "ERROR: relation \"tb_order\" does not exist\n  Position: 173"
      }
    },
    {
      "kpi_name": "Order Value by Status",
      "table_name": "tb_market_order_log",
      "sql_query": "SELECT status, SUM(order_value) FROM tb_market_order_log JOIN tb_order ON tb_market_order_log.order_id = tb_order.order_id WHERE tb_market_order_log.order_id IS NOT NULL AND tb_order.order_value IS NOT NULL AND status IS NOT NULL GROUP BY status",
      "error": "SQL execution failed: ERROR: relation \"tb_order\" does not exist\n  Position: 181",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: relation \"tb_order\" does not exist\n  Position: 181",
        "error": "ERROR: relation \"tb_order\" does not exist\n  Position: 181"
      }
    },
    {
      "kpi_name": "Count of Unique Partners",
      "table_name": "tb_payment_market",
      "sql_query": "SELECT COUNT(DISTINCT tax_invoice_info → partner_name) FROM tb_payment_market WHERE tax_invoice_info → partner_name IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 158",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 158",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 158"
      }
    },
    {
      "kpi_name": "Count of Unique Users",
      "table_name": "tb_payment_market",
      "sql_query": "SELECT COUNT(DISTINCT tax_invoice_info → user_name) FROM tb_payment_market WHERE tax_invoice_info → user_name IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 158",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 158",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 158"
      }
    },
    {
      "kpi_name": "Daily Active Users",
      "table_name": "tb_user_activity_log",
      "sql_query": "SELECT log_date, COUNT(DISTINCT user_id) FROM tb_user_activity_log WHERE user_id IS NOT NULL AND log_date IS NOT NULL GROUP BY log_date",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 126"
      }
    },
    {
      "kpi_name": "Weekly Active Users",
      "table_name": "tb_user_activity_log",
      "sql_query": "SELECT DATE_TRUNC('week', log_date) AS week_start, COUNT(DISTINCT user_id) FROM tb_user_activity_log WHERE user_id IS NOT NULL AND log_date IS NOT NULL GROUP BY week_start",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 145",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 145"
      }
    },
    {
      "kpi_name": "Monthly Active Users",
      "table_name": "tb_user_activity_log",
      "sql_query": "SELECT DATE_TRUNC('month', log_date) AS month_start, COUNT(DISTINCT user_id) FROM tb_user_activity_log WHERE user_id IS NOT NULL AND log_date IS NOT NULL GROUP BY month_start",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 146",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 146"
      }
    },
    {
      "kpi_name": "User Activity Trend",
      "table_name": "tb_user_activity_log",
      "sql_query": "SELECT log_date, COUNT(*) FROM tb_user_activity_log WHERE user_id IS NOT NULL AND log_date IS NOT NULL GROUP BY log_date ORDER BY log_date",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 126",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 126"
      }
    },
    {
      "kpi_name": "User Activity Peak Time",
      "table_name": "tb_user_activity_log",
      "sql_query": "SELECT DATE_PART('hour', log_date) as hour, COUNT(*) FROM tb_user_activity_log WHERE user_id IS NOT NULL AND log_date IS NOT NULL GROUP BY hour ORDER BY COUNT(*) DESC LIMIT 1",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 144",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 144",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 144"
      }
    },
    {
      "kpi_name": "User Activity Day of Week",
      "table_name": "tb_user_activity_log",
      "sql_query": "SELECT DATE_PART('dow', log_date) as day_of_week, COUNT(*) FROM tb_user_activity_log WHERE user_id IS NOT NULL AND log_date IS NOT NULL GROUP BY day_of_week ORDER BY COUNT(*) DESC LIMIT 1",
      "error": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 143",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"log_date\" does not exist\n  Position: 143",
        "error": "ERROR: column \"log_date\" does not exist\n  Position: 143"
      }
    },
    {
      "kpi_name": "Average Assembly Count",
      "table_name": "tb_rfq",
      "sql_query": "SELECT AVG(add_info -> assemblyCnt) FROM tb_rfq WHERE add_info -> assemblyCnt IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"assemblycnt\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"assemblycnt\" does not exist\n  Position: 142",
        "error": "ERROR: column \"assemblycnt\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "RFQs with Mask Provided",
      "table_name": "tb_rfq",
      "sql_query": "SELECT COUNT(*) FROM tb_rfq WHERE add_info -> isProvideMask = true",
      "error": "SQL execution failed: ERROR: column \"isprovidemask\" does not exist\n  Position: 165",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"isprovidemask\" does not exist\n  Position: 165",
        "error": "ERROR: column \"isprovidemask\" does not exist\n  Position: 165"
      }
    },
    {
      "kpi_name": "Average Manufacture Count",
      "table_name": "tb_rfq",
      "sql_query": "SELECT AVG(add_info -> manufactureCnt) FROM tb_rfq WHERE add_info -> manufactureCnt IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"manufacturecnt\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"manufacturecnt\" does not exist\n  Position: 142",
        "error": "ERROR: column \"manufacturecnt\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "RFQs by Supply Method Type",
      "table_name": "tb_rfq",
      "sql_query": "SELECT add_info -> supplyMethodType, COUNT(*) FROM tb_rfq GROUP BY add_info -> supplyMethodType",
      "error": "SQL execution failed: ERROR: column \"supplymethodtype\" does not exist\n  Position: 138",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"supplymethodtype\" does not exist\n  Position: 138",
        "error": "ERROR: column \"supplymethodtype\" does not exist\n  Position: 138"
      }
    },
    {
      "kpi_name": "Certified Products",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE kc_value → certificate_number IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 177"
      }
    },
    {
      "kpi_name": "Average Product Price",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT AVG(max_price_info → price) FROM tb_oem_market_product WHERE max_price_info → price IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 145",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 145",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 145"
      }
    },
    {
      "kpi_name": "Discounted Products",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE min_price_info → discount_rate > 0",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 183",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 183",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 183"
      }
    },
    {
      "kpi_name": "Products without KC Mark",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE kc_value → use_kc_mark = false",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 177"
      }
    },
    {
      "kpi_name": "Certification Authorities",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(DISTINCT kc_value → certification_authority) FROM tb_oem_market_product WHERE kc_value → certification_authority IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 150",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 150",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 150"
      }
    },
    {
      "kpi_name": "Certified Companies",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(DISTINCT kc_value → certified_company_name) FROM tb_oem_market_product WHERE kc_value → certified_company_name IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 150",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 150",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 150"
      }
    },
    {
      "kpi_name": "Imported Products",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE kc_value → import_type = 'imported'",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 177"
      }
    },
    {
      "kpi_name": "Domestic Products",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE kc_value → import_type = 'domestic'",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 177"
      }
    },
    {
      "kpi_name": "Products with Consumer Dispute Resolution Details",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE product_notice → consumer_dispute_resolution_details → custom_input IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 183",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 183",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 183"
      }
    },
    {
      "kpi_name": "Products with Exchange Return Warranty Terms",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE product_notice → exchange_return_warranty_terms → custom_input IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 183",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 183",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 183"
      }
    },
    {
      "kpi_name": "Average Discount Amount",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT AVG(min_price_info → discount_amount) FROM tb_oem_market_product WHERE min_price_info → discount_amount > 0",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 145",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 145",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 145"
      }
    },
    {
      "kpi_name": "Products with No KC Reason",
      "table_name": "tb_oem_market_product",
      "sql_query": "SELECT COUNT(*) FROM tb_oem_market_product WHERE kc_value → no_kc_reason IS NOT NULL",
      "error": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: syntax error at or near \"→\"\n  Position: 177",
        "error": "ERROR: syntax error at or near \"→\"\n  Position: 177"
      }
    },
    {
      "kpi_name": "Average Age of Partnerships",
      "table_name": "tb_partner",
      "sql_query": "SELECT AVG(DATEDIFF(CURRENT_DATE, create_date)) FROM tb_partner WHERE create_date IS NOT NULL AND create_date > '1900-01-01'",
      "error": "SQL execution failed: ERROR: function datediff(date, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(date, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(date, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "Average User Lifespan",
      "table_name": "tb_user_info",
      "sql_query": "SELECT AVG(DATEDIFF(last_login_date, create_date)) FROM tb_user_info WHERE last_login_date IS NOT NULL AND create_date IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "User Update Frequency",
      "table_name": "tb_user_info",
      "sql_query": "SELECT AVG(DATEDIFF(update_date, create_date)) FROM tb_user_info WHERE update_date IS NOT NULL AND create_date IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "User Login Frequency",
      "table_name": "tb_user_info",
      "sql_query": "SELECT AVG(DATEDIFF(last_login_date, create_date)) FROM tb_user_info WHERE last_login_date IS NOT NULL AND create_date IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "User Login Recency",
      "table_name": "tb_user_info",
      "sql_query": "SELECT user_id, DATEDIFF(NOW(), last_login_date) FROM tb_user_info WHERE last_login_date IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135"
      }
    },
    {
      "kpi_name": "User Data Update Recency",
      "table_name": "tb_user_info",
      "sql_query": "SELECT user_id, DATEDIFF(NOW(), update_date) FROM tb_user_info WHERE update_date IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135"
      }
    },
    {
      "kpi_name": "User Data Update Frequency",
      "table_name": "tb_user_info",
      "sql_query": "SELECT user_id, AVG(DATEDIFF(update_date, create_date)) FROM tb_user_info WHERE update_date IS NOT NULL AND create_date IS NOT NULL GROUP BY user_id",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 139",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 139",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 139"
      }
    },
    {
      "kpi_name": "User Account Age",
      "table_name": "tb_user_info",
      "sql_query": "SELECT user_id, DATEDIFF(NOW(), create_date) FROM tb_user_info WHERE create_date IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 135"
      }
    },
    {
      "kpi_name": "Redeal Rate",
      "table_name": "tb_statistics_partner",
      "sql_query": "SELECT partner_id, (SUM(user_redeal_cnt) / SUM(total_deal_cnt)) * 100 as redeal_rate FROM tb_statistics_partner GROUP BY partner_id;",
      "error": "SQL execution failed: ERROR: division by zero",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: division by zero",
        "error": "ERROR: division by zero"
      }
    },
    {
      "kpi_name": "Quotation to Purchase Order Conversion Rate",
      "table_name": "tb_statistics_partner",
      "sql_query": "SELECT partner_id, (SUM(po_complete_cnt) / SUM(quot_cnt)) * 100 as po_conversion_rate FROM tb_statistics_partner GROUP BY partner_id;",
      "error": "SQL execution failed: ERROR: division by zero",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: division by zero",
        "error": "ERROR: division by zero"
      }
    },
    {
      "kpi_name": "Purchase Order Completion Rate",
      "table_name": "tb_statistics_partner",
      "sql_query": "SELECT partner_id, (SUM(po_complete_cnt) / SUM(total_deal_cnt)) * 100 as po_completion_rate FROM tb_statistics_partner GROUP BY partner_id;",
      "error": "SQL execution failed: ERROR: division by zero",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: division by zero",
        "error": "ERROR: division by zero"
      }
    },
    {
      "kpi_name": "Average Review Score per Deal",
      "table_name": "tb_statistics_partner",
      "sql_query": "SELECT partner_id, (SUM(total_review_score) / SUM(total_deal_cnt)) as avg_review_score_per_deal FROM tb_statistics_partner GROUP BY partner_id;",
      "error": "SQL execution failed: ERROR: division by zero",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: division by zero",
        "error": "ERROR: division by zero"
      }
    },
    {
      "kpi_name": "Average Delivery Time",
      "table_name": "tb_oem_market_order",
      "sql_query": "SELECT AVG(DATEDIFF(delivery_info ->> 'update_date', delivery_info ->> 'create_date')) FROM tb_oem_market_order WHERE delivery_info ->> 'create_date' IS NOT NULL AND delivery_info ->> 'update_date' IS NOT NULL",
      "error": "SQL execution failed: ERROR: function datediff(text, text) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(text, text) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(text, text) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "Average Order Size",
      "table_name": "tb_oem_market_order",
      "sql_query": "SELECT AVG(delivery_info ->> 'total_cnt') FROM tb_oem_market_order WHERE delivery_info ->> 'total_cnt' IS NOT NULL",
      "error": "SQL execution failed: ERROR: function avg(text) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 126",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function avg(text) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 126",
        "error": "ERROR: function avg(text) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 126"
      }
    },
    {
      "kpi_name": "Subscription Duration",
      "table_name": "tb_subscribe_partner",
      "sql_query": "SELECT AVG(DATEDIFF(end_date, start_date)) FROM tb_subscribe_partner WHERE end_date IS NOT NULL AND start_date IS NOT NULL AND end_date > start_date",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "Cart Conversion Rate",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'completed' THEN 1 END) / COUNT(*) FROM tb_market_cart WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
        "error": "ERROR: column \"status\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "Cart Abandonment Rate",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'abandoned' THEN 1 END) / COUNT(*) FROM tb_market_cart WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
        "error": "ERROR: column \"status\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "Average Cart Value",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT AVG(sum) FROM ( SELECT SUM(price * cnt) as sum FROM tb_market_cart JOIN tb_product ON tb_market_cart.product_id = tb_product.product_id WHERE price IS NOT NULL AND cnt IS NOT NULL GROUP BY user_id ) as subquery;",
      "error": "SQL execution failed: ERROR: relation \"tb_product\" does not exist\n  Position: 198",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: relation \"tb_product\" does not exist\n  Position: 198",
        "error": "ERROR: relation \"tb_product\" does not exist\n  Position: 198"
      }
    },
    {
      "kpi_name": "Cart Completion Time",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT AVG(DATEDIFF(purchase_date, create_date)) FROM tb_market_cart JOIN tb_purchase ON tb_market_cart.user_id = tb_purchase.user_id WHERE purchase_date IS NOT NULL AND create_date IS NOT NULL AND purchase_date > create_date",
      "error": "SQL execution failed: ERROR: relation \"tb_purchase\" does not exist\n  Position: 193",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: relation \"tb_purchase\" does not exist\n  Position: 193",
        "error": "ERROR: relation \"tb_purchase\" does not exist\n  Position: 193"
      }
    },
    {
      "kpi_name": "Cart Retention Rate",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT COUNT(DISTINCT CASE WHEN DATEDIFF(return_date, create_date) <= 7 THEN user_id END) / COUNT(DISTINCT user_id) FROM tb_market_cart JOIN tb_user ON tb_market_cart.user_id = tb_user.user_id WHERE return_date IS NOT NULL AND create_date IS NOT NULL AND return_date > create_date",
      "error": "SQL execution failed: ERROR: column \"return_date\" does not exist\n  Position: 160",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"return_date\" does not exist\n  Position: 160",
        "error": "ERROR: column \"return_date\" does not exist\n  Position: 160"
      }
    },
    {
      "kpi_name": "Cart Item Return Rate",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'returned' THEN 1 END) / COUNT(*) FROM tb_market_cart WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
        "error": "ERROR: column \"status\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "Cart Item Exchange Rate",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'exchanged' THEN 1 END) / COUNT(*) FROM tb_market_cart WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
        "error": "ERROR: column \"status\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "Cart Item Refund Rate",
      "table_name": "tb_market_cart",
      "sql_query": "SELECT COUNT(CASE WHEN status = 'refunded' THEN 1 END) / COUNT(*) FROM tb_market_cart WHERE status IS NOT NULL",
      "error": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: column \"status\" does not exist\n  Position: 142",
        "error": "ERROR: column \"status\" does not exist\n  Position: 142"
      }
    },
    {
      "kpi_name": "Average Payout Time to Partners",
      "table_name": "tb_oem_market_payment",
      "sql_query": "SELECT AVG(DATEDIFF(payout_date_to_partner, confirm_date)) FROM tb_oem_market_payment WHERE payout_date_to_partner IS NOT NULL AND confirm_date IS NOT NULL AND payout_date_to_partner > confirm_date",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "Average Payout Time to Capa",
      "table_name": "tb_oem_market_payment",
      "sql_query": "SELECT AVG(DATEDIFF(payout_date_to_capa, confirm_date)) FROM tb_oem_market_payment WHERE payout_date_to_capa IS NOT NULL AND confirm_date IS NOT NULL AND payout_date_to_capa > confirm_date",
      "error": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130",
        "error": "ERROR: function datediff(timestamp with time zone, timestamp with time zone) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 130"
      }
    },
    {
      "kpi_name": "Partner Lifespan",
      "table_name": "tb_partner_product",
      "sql_query": "SELECT AVG(DATE_PART('day', CURRENT_DATE - MIN(create_date))) FROM tb_partner_product WHERE partner_id IS NOT NULL AND create_date IS NOT NULL AND create_date > '1900-01-01' GROUP BY partner_id",
      "error": "SQL execution failed: ERROR: aggregate function calls cannot be nested\n  Position: 162",
      "validation_details": {
        "status": "failed",
        "message": "SQL execution failed: ERROR: aggregate function calls cannot be nested\n  Position: 162",
        "error": "ERROR: aggregate function calls cannot be nested\n  Position: 162"
      }
    }
  ]
}