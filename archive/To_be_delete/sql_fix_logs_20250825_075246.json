[
  {
    "kpi_name": "User Engagement Rate",
    "table_name": "tb_user",
    "original_sql": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM tb_user WHERE user_id IS NOT NULL) AS engagement_rate FROM tb_user WHERE log_date IS NOT NULL AND user_id IS NOT NULL GROUP BY month",
    "fixed_sql": "SELECT DATE_TRUNC('month', log_date) AS month, COUNT(DISTINCT user_id) / total_users AS engagement_rate\nFROM tb_user\nCROSS JOIN (SELECT COUNT(DISTINCT user_id) AS total_users FROM tb_user WHERE user_id IS NOT NULL) AS total_users_count\nWHERE log_date IS NOT NULL AND user_id IS NOT NULL\nGROUP BY month",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:35:30.601437"
  },
  {
    "kpi_name": "User Activity Frequency",
    "table_name": "tb_user_activity_log",
    "original_sql": "SELECT AVG(count) FROM (SELECT user_id, COUNT(*) as count FROM tb_user_activity_log WHERE user_id IS NOT NULL GROUP BY user_id) as subquery",
    "fixed_sql": "SELECT AVG(count) \nFROM (SELECT user_id, COUNT(*) as count \n      FROM tb_user_activity_log \n      WHERE user_id IS NOT NULL \n      GROUP BY user_id) subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:38:26.717216"
  },
  {
    "kpi_name": "User Activity Distribution",
    "table_name": "tb_user_activity_log",
    "original_sql": "SELECT count, COUNT(*) as user_count FROM (SELECT user_id, COUNT(*) as count FROM tb_user_activity_log WHERE user_id IS NOT NULL GROUP BY user_id) as subquery GROUP BY count",
    "fixed_sql": "SELECT count, COUNT(*) as user_count \nFROM (\n    SELECT COUNT(*) as count \n    FROM tb_user_activity_log \n    WHERE user_id IS NOT NULL \n    GROUP BY user_id\n) as subquery \nGROUP BY count;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:38:29.381551"
  },
  {
    "kpi_name": "User Retention Rate",
    "table_name": "tb_user_activity_log",
    "original_sql": "SELECT COUNT(DISTINCT user_id) * 1.0 / (SELECT COUNT(DISTINCT user_id) FROM tb_user_activity_log WHERE user_id IS NOT NULL) FROM (SELECT user_id, COUNT(*) as count FROM tb_user_activity_log WHERE user_id IS NOT NULL GROUP BY user_id HAVING COUNT(*) > 1) as subquery",
    "fixed_sql": "SELECT COUNT(DISTINCT user_id) * 1.0 / (SELECT COUNT(DISTINCT user_id) FROM tb_user_activity_log WHERE user_id IS NOT NULL) \nFROM (\n    SELECT user_id, COUNT(*) as count \n    FROM tb_user_activity_log \n    WHERE user_id IS NOT NULL \n    GROUP BY user_id \n    HAVING COUNT(*) > 1\n) as subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:38:39.415450"
  },
  {
    "kpi_name": "Products with Maximum Discount",
    "table_name": "tb_market_product",
    "original_sql": "SELECT COUNT(*) FROM tb_market_product WHERE (base_price - discounted_price) / base_price = (SELECT MAX((base_price - discounted_price) / base_price) FROM tb_market_product WHERE base_price IS NOT NULL AND discounted_price IS NOT NULL)",
    "fixed_sql": "SELECT COUNT(*) \nFROM tb_market_product \nWHERE (base_price - discounted_price) / base_price = (\n    SELECT MAX((base_price - discounted_price) / base_price) \n    FROM tb_market_product \n    WHERE base_price IS NOT NULL AND discounted_price IS NOT NULL\n)",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:40:44.338474"
  },
  {
    "kpi_name": "Categories Above Average Sort Value",
    "table_name": "tb_market_category",
    "original_sql": "SELECT COUNT(*) FROM tb_market_category WHERE sort > (SELECT AVG(sort) FROM tb_market_category WHERE sort IS NOT NULL)",
    "fixed_sql": "SELECT COUNT(*) \nFROM tb_market_category \nWHERE sort > (SELECT AVG(sort) FROM tb_market_category WHERE sort IS NOT NULL)",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:43:36.160399"
  },
  {
    "kpi_name": "Categories Below Average Sort Value",
    "table_name": "tb_market_category",
    "original_sql": "SELECT COUNT(*) FROM tb_market_category WHERE sort < (SELECT AVG(sort) FROM tb_market_category WHERE sort IS NOT NULL)",
    "fixed_sql": "SELECT COUNT(*) \nFROM tb_market_category \nWHERE sort < (SELECT AVG(sort) FROM tb_market_category WHERE sort IS NOT NULL)",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:43:39.186889"
  },
  {
    "kpi_name": "Average Child Categories",
    "table_name": "tb_market_category",
    "original_sql": "SELECT AVG(child_count) FROM (SELECT parent_category_id, COUNT(*) as child_count FROM tb_market_category GROUP BY parent_category_id) as subquery",
    "fixed_sql": "SELECT AVG(child_count) \nFROM (\n    SELECT parent_category_id, COUNT(*) as child_count \n    FROM tb_market_category \n    GROUP BY parent_category_id\n) as subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:43:54.198559"
  },
  {
    "kpi_name": "Parent Categories Without Children",
    "table_name": "tb_market_category",
    "original_sql": "SELECT COUNT(*) FROM (SELECT parent_category_id, COUNT(*) as child_count FROM tb_market_category GROUP BY parent_category_id) as subquery WHERE child_count = 0",
    "fixed_sql": "SELECT COUNT(*) \nFROM (\n    SELECT parent_category_id, COUNT(*) as child_count \n    FROM tb_market_category \n    GROUP BY parent_category_id\n) as subquery \nWHERE child_count = 0;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:43:57.131525"
  },
  {
    "kpi_name": "Parent Categories With Children",
    "table_name": "tb_market_category",
    "original_sql": "SELECT COUNT(*) FROM (SELECT parent_category_id, COUNT(*) as child_count FROM tb_market_category GROUP BY parent_category_id) as subquery WHERE child_count > 0",
    "fixed_sql": "SELECT COUNT(*) \nFROM (\n    SELECT parent_category_id, COUNT(*) as child_count \n    FROM tb_market_category \n    GROUP BY parent_category_id\n) as subquery \nWHERE child_count > 0;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:44:00.343859"
  },
  {
    "kpi_name": "Sellers Per User",
    "table_name": "tb_market_seller",
    "original_sql": "SELECT AVG(count) FROM (SELECT user_id, COUNT(*) as count FROM tb_market_seller WHERE user_id IS NOT NULL GROUP BY user_id) as subquery",
    "fixed_sql": "SELECT AVG(count) \nFROM (\n    SELECT user_id, COUNT(*) as count \n    FROM tb_market_seller \n    WHERE user_id IS NOT NULL \n    GROUP BY user_id\n) as subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:44:46.765383"
  },
  {
    "kpi_name": "Sellers Per Partner",
    "table_name": "tb_market_seller",
    "original_sql": "SELECT AVG(count) FROM (SELECT partner_id, COUNT(*) as count FROM tb_market_seller WHERE partner_id IS NOT NULL GROUP BY partner_id) as subquery",
    "fixed_sql": "SELECT AVG(cnt) \nFROM (\n    SELECT partner_id, COUNT(*) as cnt \n    FROM tb_market_seller \n    WHERE partner_id IS NOT NULL \n    GROUP BY partner_id\n) subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:44:49.822713"
  },
  {
    "kpi_name": "Average Orders per Customer",
    "table_name": "tb_oem_market_order",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT client_info, COUNT(*) as order_count FROM tb_oem_market_order GROUP BY client_info)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (SELECT client_info, COUNT(*) as order_count \n      FROM tb_oem_market_order \n      GROUP BY client_info) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:45:07.186554"
  },
  {
    "kpi_name": "Total Selected Deliveries",
    "table_name": "tb_oem_market_order",
    "original_sql": "SELECT COUNT(*) FROM tb_oem_market_order WHERE delivery_info ->> 'selected' = 'true'",
    "fixed_sql": "SELECT COUNT(*) FROM tb_oem_market_order WHERE delivery_info ->> 'selected' = 'true';",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:45:20.994417"
  },
  {
    "kpi_name": "Average Deliveries per Customer",
    "table_name": "tb_oem_market_order",
    "original_sql": "SELECT AVG(delivery_count) FROM (SELECT client_info, COUNT(*) as delivery_count FROM tb_oem_market_order WHERE delivery_info IS NOT NULL GROUP BY client_info)",
    "fixed_sql": "SELECT AVG(delivery_count) \nFROM (\n    SELECT client_info, COUNT(*) as delivery_count \n    FROM tb_oem_market_order \n    WHERE delivery_info IS NOT NULL \n    GROUP BY client_info\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:45:25.606435"
  },
  {
    "kpi_name": "Cart Item Diversity",
    "table_name": "tb_market_cart",
    "original_sql": "SELECT AVG(cnt) FROM (SELECT COUNT(DISTINCT product_id) as cnt FROM tb_market_cart WHERE product_id IS NOT NULL GROUP BY user_id) as subquery",
    "fixed_sql": "SELECT AVG(cnt) \nFROM (\n    SELECT COUNT(DISTINCT product_id) as cnt \n    FROM tb_market_cart \n    WHERE product_id IS NOT NULL \n    GROUP BY user_id\n) subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:47:57.744702"
  },
  {
    "kpi_name": "Average Cart Value",
    "table_name": "tb_market_cart",
    "original_sql": "SELECT AVG(sum) FROM (SELECT SUM(price * cnt) as sum FROM tb_market_cart JOIN tb_product ON tb_market_cart.product_id = tb_product.product_id WHERE price IS NOT NULL AND cnt IS NOT NULL GROUP BY user_id) as subquery",
    "fixed_sql": "SELECT AVG(sum) \nFROM (\n    SELECT SUM(price * cnt) as sum \n    FROM tb_market_cart \n    JOIN tb_product ON tb_market_cart.product_id = tb_product.product_id \n    WHERE price IS NOT NULL AND cnt IS NOT NULL \n    GROUP BY user_id\n) as subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:48:04.724880"
  },
  {
    "kpi_name": "Average Deliveries per User",
    "table_name": "tb_user_delivery",
    "original_sql": "SELECT AVG(delivery_count) FROM (SELECT user_id, COUNT(*) as delivery_count FROM tb_user_delivery GROUP BY user_id) as subquery",
    "fixed_sql": "SELECT AVG(delivery_count) \nFROM (SELECT user_id, COUNT(*) as delivery_count FROM tb_user_delivery GROUP BY user_id) subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:48:23.400324"
  },
  {
    "kpi_name": "Orders Per Receiver",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT receiver, COUNT(order_id) as order_count FROM tb_market_order_address WHERE receiver IS NOT NULL GROUP BY receiver)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (\n    SELECT receiver, COUNT(order_id) as order_count \n    FROM tb_market_order_address \n    WHERE receiver IS NOT NULL \n    GROUP BY receiver\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:03.785356"
  },
  {
    "kpi_name": "Orders Per Delivery Location",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT address, COUNT(order_id) as order_count FROM tb_market_order_address WHERE address IS NOT NULL GROUP BY address)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (\n    SELECT COUNT(order_id) as order_count \n    FROM tb_market_order_address \n    WHERE address IS NOT NULL \n    GROUP BY address\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:09.392424"
  },
  {
    "kpi_name": "Orders Per Zipcode",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT zipcode, COUNT(order_id) as order_count FROM tb_market_order_address WHERE zipcode IS NOT NULL GROUP BY zipcode)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (SELECT COUNT(order_id) as order_count \n      FROM tb_market_order_address \n      WHERE zipcode IS NOT NULL \n      GROUP BY zipcode) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:13.784591"
  },
  {
    "kpi_name": "Orders Per Delivery Name",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT delivery_name, COUNT(order_id) as order_count FROM tb_market_order_address WHERE delivery_name IS NOT NULL GROUP BY delivery_name)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (\n    SELECT delivery_name, COUNT(order_id) as order_count \n    FROM tb_market_order_address \n    WHERE delivery_name IS NOT NULL \n    GROUP BY delivery_name\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:19.127249"
  },
  {
    "kpi_name": "Orders Per Cellphone Number",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT cellphone1, COUNT(order_id) as order_count FROM tb_market_order_address WHERE cellphone1 IS NOT NULL GROUP BY cellphone1)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (\n    SELECT cellphone1, COUNT(order_id) as order_count \n    FROM tb_market_order_address \n    WHERE cellphone1 IS NOT NULL \n    GROUP BY cellphone1\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:24.446644"
  },
  {
    "kpi_name": "Orders Per Receiver-Cellphone Combination",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT CONCAT(receiver, '_', cellphone1) as receiver_cellphone, COUNT(order_id) as order_count FROM tb_market_order_address WHERE receiver IS NOT NULL AND cellphone1 IS NOT NULL GROUP BY receiver_cellphone)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (\n    SELECT CONCAT(receiver, '_', cellphone1) as receiver_cellphone, COUNT(order_id) as order_count \n    FROM tb_market_order_address \n    WHERE receiver IS NOT NULL AND cellphone1 IS NOT NULL \n    GROUP BY CONCAT(receiver, '_', cellphone1)\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:30.097934"
  },
  {
    "kpi_name": "Orders Per Receiver-Delivery Name Combination",
    "table_name": "tb_market_order_address",
    "original_sql": "SELECT AVG(order_count) FROM (SELECT CONCAT(receiver, '_', delivery_name) as receiver_delivery, COUNT(order_id) as order_count FROM tb_market_order_address WHERE receiver IS NOT NULL AND delivery_name IS NOT NULL GROUP BY receiver_delivery)",
    "fixed_sql": "SELECT AVG(order_count) \nFROM (\n    SELECT CONCAT(receiver, '_', delivery_name) as receiver_delivery, COUNT(order_id) as order_count \n    FROM tb_market_order_address \n    WHERE receiver IS NOT NULL AND delivery_name IS NOT NULL \n    GROUP BY receiver, delivery_name\n) as subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:51:35.878641"
  },
  {
    "kpi_name": "RFQs with Multiple Files",
    "table_name": "tb_rfq_file",
    "original_sql": "SELECT COUNT(*) FROM (SELECT rfq_id FROM tb_rfq_file WHERE rfq_id IS NOT NULL GROUP BY rfq_id HAVING COUNT(*) > 1) AS subquery",
    "fixed_sql": "SELECT COUNT(rfq_id) \nFROM tb_rfq_file \nWHERE rfq_id IS NOT NULL \nGROUP BY rfq_id \nHAVING COUNT(rfq_id) > 1;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:52:01.828213"
  },
  {
    "kpi_name": "RFQs with Thickness Over Average",
    "table_name": "tb_rfq_file",
    "original_sql": "SELECT COUNT(DISTINCT rfq_id) FROM tb_rfq_file WHERE thickness IS NOT NULL AND thickness > (SELECT AVG(thickness) FROM tb_rfq_file WHERE thickness IS NOT NULL)",
    "fixed_sql": "SELECT COUNT(DISTINCT rfq_id) \nFROM tb_rfq_file \nWHERE thickness IS NOT NULL \nAND thickness > (SELECT AVG(thickness) FROM tb_rfq_file WHERE thickness IS NOT NULL)",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:52:07.140638"
  },
  {
    "kpi_name": "Products per Partner",
    "table_name": "tb_partner_product",
    "original_sql": "SELECT AVG(product_count) FROM (SELECT partner_id, COUNT(*) as product_count FROM tb_partner_product WHERE partner_id IS NOT NULL GROUP BY partner_id) subquery",
    "fixed_sql": "SELECT AVG(product_count) \nFROM (SELECT partner_id, COUNT(*) as product_count \n      FROM tb_partner_product \n      WHERE partner_id IS NOT NULL \n      GROUP BY partner_id) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:52:18.414202"
  },
  {
    "kpi_name": "Product Diversity per Partner",
    "table_name": "tb_partner_product",
    "original_sql": "SELECT AVG(product_count) FROM (SELECT partner_id, COUNT(DISTINCT product) as product_count FROM tb_partner_product WHERE partner_id IS NOT NULL GROUP BY partner_id) subquery",
    "fixed_sql": "SELECT AVG(product_count) \nFROM (\n    SELECT partner_id, COUNT(DISTINCT product) as product_count \n    FROM tb_partner_product \n    WHERE partner_id IS NOT NULL \n    GROUP BY partner_id\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:52:30.194789"
  },
  {
    "kpi_name": "Partner Diversity per Product",
    "table_name": "tb_partner_product",
    "original_sql": "SELECT AVG(partner_count) FROM (SELECT product, COUNT(DISTINCT partner_id) as partner_count FROM tb_partner_product WHERE product IS NOT NULL GROUP BY product) subquery",
    "fixed_sql": "SELECT AVG(partner_count) \nFROM (\n    SELECT product, COUNT(DISTINCT partner_id) as partner_count \n    FROM tb_partner_product \n    WHERE product IS NOT NULL \n    GROUP BY product\n) AS subquery;",
    "fixes_applied": [
      "Applied LLM-based SQL fixes"
    ],
    "timestamp": "2025-08-25T07:52:33.165460"
  }
]